<template>
  <q-page>
    <q-btn label="remove" @click="deleteRow" :disable="selected.length === 0" />
    <q-btn label="add" @click="addRow" />
    <q-btn label="edit" @click="editRow" />
    <q-table
      title="Room Contract"
      :data="data"
      :columns="columns"
      row-key="id"
      :pagination.sync="pagination"
      binary-state-sort
      :rows-per-page-options="[3, 5, 10, 25, 50, 100]"
      @request="onRequest"
      selection="single"
      :selected.sync="selected"
    >
    </q-table>
    <div class="q-pa-md q-gutter-sm">
      <q-dialog v-model="dialog" persistent @keydown.esc="dialog = false">
        <q-card style="width: 850px;" align="center">
          <q-card-section class="row items-center">
            <div class="text-h6">{{ title }}</div>
            <q-space />
            <q-btn icon="fas fa-times" flat round dense v-close-popup />
          </q-card-section>
          <q-card-section>
            <q-form ref="form" class="q-gutter-md">
              <div style="max-width: 350px">
                <p class="text-bold q-pt-md" align="left">Name:</p>
                <q-select
                  filled
                  v-model="item.contract_id"
                  :options="contract_options"
                  @filter="fetchContractOptions"
                  label="Name"
                  style="width: 350px;"
                  lazy-rules
                  :rules="[
                    val =>
                      (val !== null && typeof val !== 'undefined') ||
                      'Please type something'
                  ]"
                />
                <p class="text-bold q-pt-md" align="left">Room:</p>
                <q-select
                  filled
                  v-model="item.room_id"
                  :options="room_options"
                  @filter="fetchRoomOptions"
                  label="Room"
                  style="width: 350px;"
                  lazy-rules
                  :rules="[
                    val =>
                      (val !== null && typeof val !== 'undefined') ||
                      'Please type something'
                  ]"
                />
                <p class="text-bold q-pt-md" align="left">Start date: </p>
                <div style="width: 350px">
                  <q-input
                    filled
                    v-model="item.start_date"
                    mask="date"
                    :rules="['date'] || 'please type somethings'"
                    lazy-rules
                  >
                    <template v-slot:append>
                      <q-icon name="event" class="cursor-pointer">
                        <q-popup-proxy
                          ref="qDateProxy"
                          transition-show="scale"
                          transition-hide="scale"
                        >
                          <q-date
                            v-model="item.start_date"
                            @input="() => $refs.qDateProxy.hide"
                            today-btn
                          />
                        </q-popup-proxy>
                      </q-icon>
                    </template>
                  </q-input>
                </div>

                <p class="text-bold q-pt-md" align="left">End date:</p>
                <div style="width: 350px">
                  <q-input
                    filled
                    v-model="item.end_date"
                    mask="date"
                    :rules="['date'] || 'please type somethings'"
                  >
                    <template v-slot:append>
                      <q-icon name="event" class="cursor-pointer">
                        <q-popup-proxy
                          ref="qDateProxy"
                          transition-show="scale"
                          transition-hide="scale"
                        >
                          <q-date
                            v-model="item.end_date"
                            @input="() => $refs.qDateProxy.hide()"
                            today-btn
                          />
                        </q-popup-proxy>
                      </q-icon>
                    </template>
                  </q-input>
                </div>
              </div>
              <q-card-actions align="right">
                <q-btn flat label="Cancel" color="negative" v-close-popup />
                <q-btn flat label="Save" @click.native="save" color="primary" />
              </q-card-actions>
            </q-form>
          </q-card-section>
        </q-card>
      </q-dialog>
    </div>
  </q-page>
</template>
<script>
export default {
  name: "RoomContract",
  data() {
    return {
      data: [],
      selected: [],
      dialog: false,
      title: "",
      mode: "post",
      item: {},
      room_options: [],
      contract_options: [],
      date: " ",
      columns: [
        {
          name: "contract",
          align: "left",
          label: "Contract",
          field: row => row.contract_id.label
          // sortable: true
        },
        {
          name: "room",
          align: "left",
          label: "Room",
          field: row => row.room_id.label
          //sortable: true
        },
        {
          name: "start",
          align: "left",
          label: "Start",
          field: "start_date",
          sortable: true
        },
        {
          name: "end",
          align: "left",
          label: "End",
          field: "end_date",
          sortable: true
        }
      ],
      pagination: {
        sortBy: "id",
        descending: false,
        page: 1,
        rowsPerPage: 10,
        rowsNumber: 10
      }
    };
  },
  created() {
    this.fetch();
  },
  methods: {
    editRow() {
      this.item = this.selected[0];
      this.mode = "put";
      this.dialog = true;
      this.title = "Edit Item";
    },
    addRow() {
      this.item = {};
      this.mode = "post";
      this.dialog = true;
      this.title = "Add Item";
    },
    save() {
      this.$refs.form.validate().then(success => {
        const payload = {
          contract_id: this.item.contract_id.value,
          room_id: this.item.room_id.value,
          start_date: this.item.start_date,
          end_date: this.item.end_date
        };
        if (success) {
          if (this.mode == "post") {
            this.$addItem("room_contract", payload).then(() => {
              this.fetch();
              this.dialog = false;
            });
          }
          if (this.mode == "put") {
            this.$updateItem("room_contract", this.item.id, payload).then(
              () => {
                this.fetch();
                this.dialog = false;
              }
            );
          }
        }
      });
    },
    deleteRow() {
      this.$q
        .dialog({
          title: "Delete",
          message: `Are you sure you want to delete this item?`,
          cancel: true,
          noEscDismiss: false,
          noBackdropDismiss: true
        })
        .onOk(() => {
          this.$deleteItem("room_contract", this.selected[0].id).then(() => {
            this.fetch();
          });
        });
    },
    onRequest(props) {
      this.pagination = props.pagination;
      this.fetch();
    },
    async fetch() {
      const options = [
        {
          query: "select",
          value:
            "contract_id(value:id, label:reference),room_id(value:id, label:name), *"
        }
      ];
      const response = await this.$getList(
        "room_contract",
        this.pagination,
        options
      );
      this.data = response.data;
      this.pagination = response.pagination;
    },
    fetchRoomOptions(val, update) {
      if (this.room_options.length) {
        update();
        return;
      }
      update(() => {
        this.$getList("room", {}).then(response => {
          let rooms = response.data;
          this.room_options = rooms.map(e => {
            return { value: e.id, label: e.name };
          });
        });
      });
    },
    fetchContractOptions(val, update) {
      if (this.contract_options.length) {
        update();
        return;
      }
      update(() => {
        this.$getList("contract", {}).then(response => {
          let contract = response.data;
          this.contract_options = contract.map(e => {
            return { value: e.id, label: e.reference + " - " + e.designation };
          });
        });
      });
    }
  }
};
</script>
